// Code generated by protoc-gen-go. DO NOT EDIT.
// source: apis/reminder.proto

/*
Package reminder is a generated protocol buffer package.

It is generated from these files:
	apis/reminder.proto

It has these top-level messages:
	GetRemindersRequest
	Reminder
*/
package reminder

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type GetRemindersRequest struct {
}

func (m *GetRemindersRequest) Reset()                    { *m = GetRemindersRequest{} }
func (m *GetRemindersRequest) String() string            { return proto.CompactTextString(m) }
func (*GetRemindersRequest) ProtoMessage()               {}
func (*GetRemindersRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Reminder struct {
	Id        int64  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Text      string `protobuf:"bytes,2,opt,name=text" json:"text,omitempty"`
	Action    string `protobuf:"bytes,3,opt,name=action" json:"action,omitempty"`
	Cleared   bool   `protobuf:"varint,4,opt,name=cleared" json:"cleared,omitempty"`
	Frequency string `protobuf:"bytes,5,opt,name=frequency" json:"frequency,omitempty"`
}

func (m *Reminder) Reset()                    { *m = Reminder{} }
func (m *Reminder) String() string            { return proto.CompactTextString(m) }
func (*Reminder) ProtoMessage()               {}
func (*Reminder) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Reminder) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Reminder) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *Reminder) GetAction() string {
	if m != nil {
		return m.Action
	}
	return ""
}

func (m *Reminder) GetCleared() bool {
	if m != nil {
		return m.Cleared
	}
	return false
}

func (m *Reminder) GetFrequency() string {
	if m != nil {
		return m.Frequency
	}
	return ""
}

func init() {
	proto.RegisterType((*GetRemindersRequest)(nil), "reminder.GetRemindersRequest")
	proto.RegisterType((*Reminder)(nil), "reminder.Reminder")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Reminders service

type RemindersClient interface {
	GetReminders(ctx context.Context, in *GetRemindersRequest, opts ...grpc.CallOption) (Reminders_GetRemindersClient, error)
	ClearReminder(ctx context.Context, in *Reminder, opts ...grpc.CallOption) (*Reminder, error)
	NewReminder(ctx context.Context, in *Reminder, opts ...grpc.CallOption) (*Reminder, error)
}

type remindersClient struct {
	cc *grpc.ClientConn
}

func NewRemindersClient(cc *grpc.ClientConn) RemindersClient {
	return &remindersClient{cc}
}

func (c *remindersClient) GetReminders(ctx context.Context, in *GetRemindersRequest, opts ...grpc.CallOption) (Reminders_GetRemindersClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Reminders_serviceDesc.Streams[0], c.cc, "/reminder.Reminders/GetReminders", opts...)
	if err != nil {
		return nil, err
	}
	x := &remindersGetRemindersClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Reminders_GetRemindersClient interface {
	Recv() (*Reminder, error)
	grpc.ClientStream
}

type remindersGetRemindersClient struct {
	grpc.ClientStream
}

func (x *remindersGetRemindersClient) Recv() (*Reminder, error) {
	m := new(Reminder)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *remindersClient) ClearReminder(ctx context.Context, in *Reminder, opts ...grpc.CallOption) (*Reminder, error) {
	out := new(Reminder)
	err := grpc.Invoke(ctx, "/reminder.Reminders/ClearReminder", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remindersClient) NewReminder(ctx context.Context, in *Reminder, opts ...grpc.CallOption) (*Reminder, error) {
	out := new(Reminder)
	err := grpc.Invoke(ctx, "/reminder.Reminders/NewReminder", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Reminders service

type RemindersServer interface {
	GetReminders(*GetRemindersRequest, Reminders_GetRemindersServer) error
	ClearReminder(context.Context, *Reminder) (*Reminder, error)
	NewReminder(context.Context, *Reminder) (*Reminder, error)
}

func RegisterRemindersServer(s *grpc.Server, srv RemindersServer) {
	s.RegisterService(&_Reminders_serviceDesc, srv)
}

func _Reminders_GetReminders_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetRemindersRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RemindersServer).GetReminders(m, &remindersGetRemindersServer{stream})
}

type Reminders_GetRemindersServer interface {
	Send(*Reminder) error
	grpc.ServerStream
}

type remindersGetRemindersServer struct {
	grpc.ServerStream
}

func (x *remindersGetRemindersServer) Send(m *Reminder) error {
	return x.ServerStream.SendMsg(m)
}

func _Reminders_ClearReminder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Reminder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemindersServer).ClearReminder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/reminder.Reminders/ClearReminder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemindersServer).ClearReminder(ctx, req.(*Reminder))
	}
	return interceptor(ctx, in, info, handler)
}

func _Reminders_NewReminder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Reminder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemindersServer).NewReminder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/reminder.Reminders/NewReminder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemindersServer).NewReminder(ctx, req.(*Reminder))
	}
	return interceptor(ctx, in, info, handler)
}

var _Reminders_serviceDesc = grpc.ServiceDesc{
	ServiceName: "reminder.Reminders",
	HandlerType: (*RemindersServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ClearReminder",
			Handler:    _Reminders_ClearReminder_Handler,
		},
		{
			MethodName: "NewReminder",
			Handler:    _Reminders_NewReminder_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetReminders",
			Handler:       _Reminders_GetReminders_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "apis/reminder.proto",
}

func init() { proto.RegisterFile("apis/reminder.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 217 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x4e, 0x2c, 0xc8, 0x2c,
	0xd6, 0x2f, 0x4a, 0xcd, 0xcd, 0xcc, 0x4b, 0x49, 0x2d, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17,
	0xe2, 0x80, 0xf1, 0x95, 0x44, 0xb9, 0x84, 0xdd, 0x53, 0x4b, 0x82, 0xa0, 0xdc, 0xe2, 0xa0, 0xd4,
	0xc2, 0xd2, 0xd4, 0xe2, 0x12, 0xa5, 0x3a, 0x2e, 0x0e, 0x98, 0x98, 0x10, 0x1f, 0x17, 0x53, 0x66,
	0x8a, 0x04, 0xa3, 0x02, 0xa3, 0x06, 0x73, 0x10, 0x53, 0x66, 0x8a, 0x90, 0x10, 0x17, 0x4b, 0x49,
	0x6a, 0x45, 0x89, 0x04, 0x93, 0x02, 0xa3, 0x06, 0x67, 0x10, 0x98, 0x2d, 0x24, 0xc6, 0xc5, 0x96,
	0x98, 0x5c, 0x92, 0x99, 0x9f, 0x27, 0xc1, 0x0c, 0x16, 0x85, 0xf2, 0x84, 0x24, 0xb8, 0xd8, 0x93,
	0x73, 0x52, 0x13, 0x8b, 0x52, 0x53, 0x24, 0x58, 0x14, 0x18, 0x35, 0x38, 0x82, 0x60, 0x5c, 0x21,
	0x19, 0x2e, 0xce, 0xb4, 0x22, 0x90, 0x6d, 0x79, 0xc9, 0x95, 0x12, 0xac, 0x60, 0x4d, 0x08, 0x01,
	0xa3, 0x63, 0x8c, 0x5c, 0x9c, 0x70, 0x47, 0x09, 0xb9, 0x72, 0xf1, 0x20, 0x3b, 0x52, 0x48, 0x56,
	0x0f, 0xee, 0x1f, 0x2c, 0x8e, 0x97, 0x12, 0x42, 0x48, 0xc3, 0xe4, 0x94, 0x18, 0x0c, 0x18, 0x85,
	0x2c, 0xb9, 0x78, 0x9d, 0x41, 0xb6, 0xc3, 0x7d, 0x86, 0x45, 0x21, 0x76, 0xcd, 0x42, 0xe6, 0x5c,
	0xdc, 0x7e, 0xa9, 0xe5, 0xa4, 0x6b, 0x4c, 0x62, 0x03, 0x07, 0xb8, 0x31, 0x20, 0x00, 0x00, 0xff,
	0xff, 0x64, 0xfe, 0xdf, 0x02, 0x87, 0x01, 0x00, 0x00,
}
